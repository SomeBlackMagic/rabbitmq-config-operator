// /!\ WARNING :  THIS FILE IS AUTOGENERATED FROM A KUBERNETES CUSTOM RESOURCE DEFINITION FILE. DO NOT CHANGE IT, use crd-client-generator-ts to update it.
import {CustomObjectsApi} from "@kubernetes/client-node/dist/gen/api/customObjectsApi";

export type Result<T> = T | { error: any };

export type V1alpha1GlobalConnection = {
  apiVersion: string;
  kind: string;
  metadata: {
    name?: string;
    namespace?: string;
    annotations?: {};
    labels?: {};
    resourceVersion?: string;
    generation?: number;
    deletionTimestamp?: string;
    deletionGracePeriodSeconds?: string;
    creationTimestamp?: string;
  };
  spec: {
    https?: boolean;
    host: string;
    skipTLSVerification?: boolean;
    login: { valueFrom?: { secretKeyRef?: { key?: string; name?: string } } };
    password: {
      valueFrom?: { secretKeyRef?: { key?: string; name?: string } };
    };
    fullControl?: boolean;
    applyInterval?: number;
  };
  status: {
    conditions?: Array<{
      type?: string;
      status?: string;
      lastUpdatedTime?: string;
      reason?: string;
      message?: string;
    }>;
    info?: { clusterName?: string; rabbitmqVersion?: string };
  };
};
export type V1alpha1undefined = {
  body: { items: V1alpha1GlobalConnection[] };
};

export class V1alpha1GlobalConnectionClient {
  public constructor(private customObjects: CustomObjectsApi) {}
  public async getV1alpha1undefined(): Promise<Result<V1alpha1undefined>> {
    try {
      return await this.customObjects
        .listClusterCustomObject(
          "rabbitmq-admin.io",
          "v1alpha1",
          "globalconnections"
        )
        .then((res) => {
          return res.body;
        })
        .catch((data) => {
          return data;
        });
    } catch (error) {
      return { error };
    }
  }

  public async getV1alpha1GlobalConnection(
    V1alpha1GlobalConnectionName: string
  ): Promise<Result<V1alpha1GlobalConnection>> {
    try {
      return await this.customObjects
        .getClusterCustomObject(
          "rabbitmq-admin.io",
          "v1alpha1",
          "globalconnections",
          V1alpha1GlobalConnectionName
        )
        .then((res) => {
          return res.body;
        })
        .catch((data) => {
          return data;
        });
    } catch (error) {
      return { error };
    }
  }

  public async deleteV1alpha1GlobalConnection(
    V1alpha1GlobalConnectionName: string
  ) {
    try {
      return await this.customObjects
        .deleteClusterCustomObject(
          "rabbitmq-admin.io",
          "v1alpha1",
          "globalconnections",
          V1alpha1GlobalConnectionName
        )
        .then((res) => {
          return res.body;
        })
        .catch((data) => {
          return data;
        });
    } catch (error) {
      return { error };
    }
  }

  public async createV1alpha1GlobalConnection(
    body: V1alpha1GlobalConnection
  ): Promise<Result<V1alpha1GlobalConnection>> {
    try {
      return await this.customObjects
        .createClusterCustomObject(
          "rabbitmq-admin.io",
          "v1alpha1",
          "globalconnections",
          body
        )
        .then((res) => {
          return res.body;
        })
        .catch((data) => {
          return data;
        });
    } catch (error) {
      return { error };
    }
  }

  public async patchV1alpha1GlobalConnection(
    V1alpha1GlobalConnectionName: string,
    body: Partial<V1alpha1GlobalConnection>
  ): Promise<Result<V1alpha1GlobalConnection>> {
    try {
      return await this.customObjects
        .patchClusterCustomObject(
          "rabbitmq-admin.io",
          "v1alpha1",
          "globalconnections",
          V1alpha1GlobalConnectionName,
          body
        )
        .then((res) => {
          return res.body;
        })
        .catch((data) => {
          return data;
        });
    } catch (error) {
      return { error };
    }
  }
}
